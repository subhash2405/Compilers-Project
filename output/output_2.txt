Enter infix expression:
Enter test expression:
Processing regular expression: (a|b).(c+).d?

ε-NFA Transition Table:
State	a	b	c	d	ε
0 (initial)	{}	{}	{}	{}	{1,2}
1	{3}	{}	{}	{}	{}
2	{}	{4}	{}	{}	{}
3	{}	{}	{}	{}	{5}
4	{}	{}	{}	{}	{5}
5	{}	{}	{}	{}	{6}
6	{}	{}	{}	{}	{7}
7	{}	{}	{8}	{}	{}
8	{}	{}	{}	{}	{7,9}
9	{}	{}	{}	{}	{10}
10	{}	{}	{}	{}	{11,12}
11	{}	{}	{}	{13}	{}
12 (accept)	{}	{}	{}	{}	{}
13	{}	{}	{}	{}	{12}

DFA Transition Table:
State	a	b	c	d
A (initial)	B	C	F	F
B	F	F	D	F
C	F	F	D	F
D (accept)	F	F	D	E
E (accept)	F	F	F	F
F	F	F	F	F

Minimal DFA Transition Table:
State	a	b	c	d
A (initial)	B	B	E	E
B	E	E	C	E
C (accept)	E	E	C	D
D (accept)	E	E	E	E
E	E	E	E	E

Validation result:
Test String : bcccd
True

Assembly code generated in 'regex.asm'
Graphviz .dot file saved to: /Users/siddharthsingh/Documents/Compilers-Project/minimal_dfa_graphs/graph2.dot
