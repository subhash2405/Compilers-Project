Enter infix expression:
Enter test expression:
Processing regular expression: (a+).(b.c)?.d

ε-NFA Transition Table:
State	a	b	c	d	ε
0 (initial)	{}	{}	{}	{}	{1}
1	{2}	{}	{}	{}	{}
2	{}	{}	{}	{}	{1,3}
3	{}	{}	{}	{}	{4}
4	{}	{}	{}	{}	{5,6}
5	{}	{7}	{}	{}	{}
6	{}	{}	{}	{}	{8}
7	{}	{}	{}	{}	{9}
8	{}	{}	{}	{10}	{}
9	{}	{}	{11}	{}	{}
10 (accept)	{}	{}	{}	{}	{}
11	{}	{}	{}	{}	{6}

DFA Transition Table:
State	a	b	c	d
A (initial)	B	F	F	F
B	B	C	F	D
C	F	F	E	F
D (accept)	F	F	F	F
E	F	F	F	D
F	F	F	F	F

Minimal DFA Transition Table:
State	a	b	c	d
A (initial)	B	F	F	F
B	B	C	F	D
C	F	F	E	F
D (accept)	F	F	F	F
E	F	F	F	D
F	F	F	F	F

Validation result:
Test String : ad
True

Assembly code generated in 'regex.asm'
Graphviz .dot file saved to: /Users/siddharthsingh/Documents/Compilers-Project/minimal_dfa_graphs/graph5.dot
